{"mappings":"AAAmBA,SAASC,cAAc,gBACxBD,SAASC,cAAc,eACrBD,SAASC,cAAc,iBACzBD,SAASC,cAAc,UAMnB,EAACC,EAAUC,KAO/B,MAAMC,EAAU,IAAIC,SAAQ,CAACC,EAASC,KACpC,MAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,aAAY,KACNH,EAEFF,EAAQ,uBAAqBJ,QAAiBC,OAG9CI,EAAO,sBAAoBL,QAAiBC,OAE5CS,QAAMC,IAAIT,EAAQ,GACnB,IAAK,GACR,EAIJU,CAAc,EAAG,MACdC,MAAK,EAACb,SAAEA,EAAQC,MAAEA,MACjBS,QAAQC,IAAI,uBAAqBX,QAAiBC,MAAU,IAE7Da,OAAM,EAACd,SAAEA,EAAQC,MAAEA,MAClBS,QAAQC,IAAI,sBAAoBX,QAAeC,MAAU","sources":["src/js/03-promises.js"],"sourcesContent":["const inputDelay = document.querySelector('input[delay]');\nconst inputStep = document.querySelector('input[step]');\nconst inputAmount = document.querySelector('input[amount]');\nconst submitBtn = document.querySelector('button');\n\n// const everyStep = inputDelay + inputStep * inputAmount;\n\n// console.log(everyStep);\n\nconst createPromise = (position, delay) => {\n  //   // const delay = everyStep;\n  //   // const amount = 0;\n  //   // if (let i = 0, i <= amount, i++) {\n\n  //   // }\n  //\n  const promise = new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setInterval(() => {\n      if (shouldResolve) {\n        // Fulfill\n        resolve(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      } else {\n        // Reject\n        reject(`❌ Rejected promise ${position} in ${delay}ms`);\n      }\n      console.log(promise);\n    }, 1000);\n  });\n};\n// submitBtn.addEventListener('click', createPromise);\n\ncreatePromise(2, 1500)\n  .then(({ position, delay }) => {\n    console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  })\n  .catch(({ position, delay }) => {\n    console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n  });\n"],"names":["document","querySelector","position","delay","promise","Promise","resolve","reject","shouldResolve","Math","random","setInterval","console","log","$47d4ff9957288465$var$createPromise","then","catch"],"version":3,"file":"03-promises.e877ae38.js.map"}