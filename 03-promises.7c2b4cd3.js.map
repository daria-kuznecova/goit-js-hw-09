{"mappings":"YAKA,IAEMA,EAAgB,SAACC,EAAUC,GAC/B,IAAMC,EAAU,IAAIC,SAAQ,SAACC,EAASC,GACpC,IAAMC,EAAS,EACTC,EAAgBC,KAAKC,SAAW,GACtC,IAAKC,EAAI,EAAGA,GAAKJ,EAAQI,IACvBJ,IACAK,aAAY,WACNJ,EAEFH,EAAQ,uBAAwCQ,OAAfZ,EAAS,QAAYY,OAANX,EAAM,OAGtDI,EAAO,sBAAqCO,OAAfZ,EAAS,QAAYY,OAANX,EAAM,OAEpDY,QAAQC,IAAIZ,E,GACX,I,KAjBIa,SAASC,cAAc,SAqB/BC,iBAAiB,SAAUlB,EAAcC,SAAUC,QAExDF,EACGmB,MAAK,SAAClB,EAAUC,GACfY,QAAQC,IAAIK,M,IAEbC,OAAM,SAAAC,GACLR,QAAQC,IAAIO,E","sources":["src/js/03-promises.js"],"sourcesContent":["// const inputDelay = document.querySelector('input[delay]');\n// const inputStep = document.querySelector('input[step]');\n// const inputAmount = document.querySelector('input[amount]');\n// const submitBtn = document.querySelector('button');\n\nconst form = document.querySelector('.form');\n\nconst createPromise = (position, delay) => {\n  const promise = new Promise((resolve, reject) => {\n    const amount = 0;\n    const shouldResolve = Math.random() > 0.3;\n    for (i = 0; i <= amount; i++) {\n      amount++;\n      setInterval(() => {\n        if (shouldResolve) {\n          // Fulfill\n          resolve(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        } else {\n          // Reject\n          reject(`❌ Rejected promise ${position} in ${delay}ms`);\n        }\n        console.log(promise);\n      }, 1000);\n    }\n  });\n};\nform.addEventListener('submit', createPromise(position, delay));\n\ncreatePromise\n  .then((position, delay) => {\n    console.log(value);\n  })\n  .catch(error => {\n    console.log(error);\n  });\n"],"names":["$ce04d3a99e08e73b$var$createPromise","position","delay","promise","Promise","resolve","reject","amount","shouldResolve","Math","random","i","setInterval","concat","console","log","document","querySelector","addEventListener","then","value","catch","error"],"version":3,"file":"03-promises.7c2b4cd3.js.map"}